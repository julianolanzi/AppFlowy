# NGINX Configuration for AppFlowy Cloud + EasyPanel
# This configuration routes traffic properly between all services

# Use Docker's internal DNS resolver
resolver 127.0.0.11 valid=30s;

upstream appflowy_cloud {
    server appflowy_cloud:8000 max_fails=3 fail_timeout=30s;
}

upstream gotrue {
    server gotrue:9999 max_fails=3 fail_timeout=30s;
}

upstream minio_api {
    server minio:9000 max_fails=3 fail_timeout=30s;
}

upstream minio_console {
    server minio:9001 max_fails=3 fail_timeout=30s;
}

upstream admin_frontend {
    server admin_frontend:3000 max_fails=3 fail_timeout=30s;
}

    upstream appflowy_web {
        server appflowy_web:80 max_fails=3 fail_timeout=30s;
    }server {
    listen 80;
    server_name _;

    # Increase body size for file uploads
    client_max_body_size 100M;

    # Enable error logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Test endpoint to check services
    location /debug {
        access_log off;
        return 200 "NGINX working - AppFlowy Cloud Debug\n";
        add_header Content-Type text/plain;
    }

    # AppFlowy Cloud API
    location /api/ {
        proxy_pass http://appflowy_cloud;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
    }

    # WebSocket for real-time collaboration
    location /ws/ {
        proxy_pass http://appflowy_cloud;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # GoTrue Authentication
    location /gotrue/ {
        proxy_pass http://gotrue/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # MinIO S3 API
    location /minio-api/ {
        proxy_pass http://minio_api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # MinIO Console (Admin)
    location /minio/ {
        proxy_pass http://minio_console/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # Admin Console
    location /console/ {
        proxy_pass http://admin_frontend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
    }

    # AppFlowy Web Frontend (main app) - with fallback
    location / {
        # Try appflowy_web first, fallback to simple response
        proxy_pass http://appflowy_web;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Error handling - if appflowy_web fails, show a simple page
        error_page 502 503 504 /fallback.html;
    }

    # Fallback page when services are not ready
    location = /fallback.html {
        internal;
        return 200 '<!DOCTYPE html><html><head><title>AppFlowy Cloud</title></head><body><h1>AppFlowy Cloud is starting...</h1><p>Services are initializing. Please wait a moment and refresh.</p><p><a href="/">Try again</a></p></body></html>';
        add_header Content-Type text/html;
    }
}